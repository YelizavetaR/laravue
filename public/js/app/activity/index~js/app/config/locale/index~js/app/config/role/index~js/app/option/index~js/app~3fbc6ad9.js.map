{"version":3,"file":"js/app/activity/index~js/app/config/locale/index~js/app/config/role/index~js/app/option/index~js/app~3fbc6ad9.js?id=6592617e87d99fd549ad","sources":["webpack:///./resources/js/event-bus.js","webpack:///./resources/js/mixins/table.js"],"sourcesContent":["import Vue from 'vue'\nconst EventBus = new Vue()\nexport default EventBus","import * as headerMixins from './header'\nimport { mapGetters, mapActions } from 'vuex'\nimport Swal from '@core/configs/sweet-alert'\nimport EventBus from '@js/event-bus'\n\nexport default {\n    data() {\n        return {\n            uuid: null,\n            entity: null,\n            fields: [],\n            preRequisite: {},\n            showFilters: false,\n            isInitialized: false,\n            isLoading: false,\n            getInitialDataCalled: false,\n            gotError: false,\n            selectedRows: [],\n            formErrors: {},\n            customFilters: {},\n            appendToQuery: {},\n            filtersOptions: {\n                name: '',\n            },\n            sortOptions: {\n                hasScroll: false,\n            },\n            columnsOptions: {\n                hasScroll: false,\n            },\n            exportOptions: {},\n            initUrl: '',\n            initSubUrl: null,\n            dataType: null,\n            printOptions: null,\n            headerButtons: null,\n            headerFloaters: null,\n            headerLinks: null,\n            hideFilterButton: false,\n        }\n    },\n    computed: {\n        ...mapGetters('common', [\n            'entities',\n            'filters',\n            'columns',\n            'others',\n        ]),\n        ...mapGetters('config', [\n            'configs',\n            'configs',\n            'uiConfigs',\n            'vars',\n        ]),\n        ...mapGetters('user', [\n            'hasPermission',\n            'hasAnyPermission',\n        ]),\n        isFiltered() {\n            const query = this.$route.query\n            return query.filtered === 'true' ? true : query.filtered === 'false' ? false : query.filtered\n        },\n        selectAllRows: {\n            get: function() {\n                return this.entities && this.entities.data.every(({ uuid }) => this.selectedRows.indexOf(uuid) !== -1)\n            },\n            set: function(value) {\n                let selected = this.selectedRows\n                if (value) {\n                    this.entities.data.forEach(ent => {\n                        if (selected.indexOf(ent.uuid) === -1) {\n                            selected.push(ent.uuid)\n                        }\n                    })\n                } else {\n                    this.entities.data.forEach(ent => {\n                        const index = selected.indexOf(ent.uuid)\n                        if (index !== -1) {\n                            selected.splice(index, 1)\n                        }\n                    })\n                }\n                this.selectedRows = selected\n            }\n        },\n        showTagsForm() {\n            return !!this.selectedRows.length\n        }\n    },\n    watch: {\n        $route(val, oldVal) {\n            if(this.initSubUrl && this.$route.params.uuid && val.params.uuid !== oldVal.params.uuid) {\n                this.doInit()\n                this.getEntityData()\n            } else {\n                this.updatePageMeta()\n                this.applyPageHeader()\n            }\n        },\n        columns(val, oldVal) {\n            if (val.fields) {\n                this.fields = val.fields\n                this.refreshTable()\n            }\n        },\n    },\n    methods: {\n        ...mapActions('common', [\n            'Init',\n            'InitSub',\n            'Get',\n            'GetList',\n            'Destroy',\n            'SetMeta',\n            'SetFilters',\n            'Custom',\n            'GetPreRequisite',\n            'ResetFilters',\n        ]),\n        ...mapActions('config', [\n            'SetUiConfig',\n            'SetConfig',\n        ]),\n        itemsProvider(context) {\n            this.isLoading = true\n\n            const query = {\n                ...this.filters,\n                currentPage: this.entities.meta.currentPage,\n                perPage: this.entities.meta.perPage,\n                ...this.appendToQuery\n            }\n\n            this.gotError = false\n            return this.GetList(query)\n                .then(response => {\n                    return (response.data)\n                })\n                .catch(error => {\n                    this.isLoading = false\n                    formUtil.handleErrors(error)\n                    this.gotError = true\n                    return []\n                })\n        },\n        updatePageMeta(initTable = true) {\n            const query = this.$route.query\n            const paginationMeta = { currentPage: parseInt(query.currentPage || 1), perPage: parseInt(query.perPage || this.configs.system.perPage) }\n            let filtersMeta = this.filters\n            query.objForEach((value, key) => {\n                filtersMeta[key] = value\n            })\n\n            if(this.customFilters) {\n                this.customFilters.objForEach((value, key) => {\n                    filtersMeta[key] = value\n                })\n            }\n\n            this.SetMeta(paginationMeta)\n            this.SetFilters(filtersMeta)\n\n            if (initTable) {\n                if (this.isInitialized) {\n                    this.refreshTable()\n                    this.isInitialized = true\n                } else {\n                    this.isInitialized = true\n                }\n            }\n        },\n        refreshTable() {\n            if (this.$refs && this.$refs.hasOwnProperty('btable') && this.$refs.btable) {\n                this.$refs.btable.refresh()\n            }\n        },\n        refreshTableIfRoute(route) {\n            if(this.$route.name === route) {\n                this.refreshTable()\n            }\n        },\n        toggleFilter() {\n            this.showFilters = !this.showFilters\n        },\n        deleteEntity(entity) {\n            formUtil.confirmAction()\n                .then((result) => {\n                    if (result.value) {\n                        this.isLoading = true\n                        this.Destroy(entity)\n                            .then(response => {\n                                this.isLoading = false\n                                this.$toasted.success(response.message, this.$toastConfig)\n                                this.$nextTick(() => {\n                                    this.refreshTable()\n\n                                    if (typeof this.getInitialData === \"function\" && this.getInitialDataCalled && this.getInitialDataCalledAfterDeleting) {\n                                        this.getInitialData()\n                                    }\n                                })\n                            })\n                            .catch(error => {\n                                this.isLoading = false\n                                this.isInitialized = true\n                                this.formErrors = formUtil.handleErrors(error)\n                            })\n                    } else {\n                        result.dismiss === Swal.DismissReason.cancel\n                    }\n                })\n        },\n        fillPreRequisite(response) {\n            this.preRequisite.objForEach((value, key) => {\n                this.preRequisite[key] = response[key] || value\n            })\n            this.isLoading = false\n        },\n        async getInitialData() {\n            this.isLoading = true\n            this.getInitialDataCalled = true\n            try {\n                const response = await this.GetPreRequisite(this.customFilters)\n                this.fillPreRequisite(response)\n                this.updatePageMeta()\n\n                if (typeof this.afterGetInitialData === \"function\") { \n                    this.afterGetInitialData()\n                }\n                \n                return response\n            } catch (error) {\n                this.isLoading = false\n                this.formErrors = formUtil.handleErrors(error)\n                throw error\n            }\n        },\n        getEntityData() {\n            this.isLoading = true\n\n            if(this.initSubUrl && this.$route.params.uuid) {\n                this.uuid = this.$route.params.uuid\n                return this.Get({ uuid: this.uuid })\n                    .then(response => {\n                        this.entity = response\n\n                        if(response.name) {\n                            this.pageTitle = response.name\n                            this.subTitle = response.name ? this.subTitle : ''\n                            this.applyPageHeader()\n                        }\n\n                        this.doInitSub()\n                        this.isLoading = false\n                        this.updatePageMeta()\n\n                        if (typeof this.afterGetEntityData === \"function\") { \n                            this.afterGetEntityData()\n                        }\n\n                    })\n                    .catch(error => {\n                        this.isLoading = false\n                        formUtil.handleErrors(error)\n                        this.$router.back()\n                    })\n            } else {\n                this.isLoading = false\n                this.$router.back()\n            }\n        },\n        applyTags(formData) {\n            this.Custom({\n                    url: `/${this.initUrl}/action`,\n                    method: 'post',\n                    data: {\n                        ...formData,\n                        uuids: this.selectedRows\n                    }\n                })\n                .then(response => {\n                    this.selectedRows = []\n                    this.$toasted.success(response.message, this.$toastConfig)\n                    this.isLoading = false\n                })\n                .catch(error => {\n                    this.isLoading = false\n                    this.formErrors = formUtil.handleErrors(error)\n                })\n        },\n        getSortOptionsArray() {\n            return this.fields.filter(f => f.sort)\n                .map(f => {\n                    return {\n                        label: f.label,\n                        sort: f.sort,\n                    }\n                })\n        },\n        getHeaderOptions() {\n            let buttons = []\n            if (this.routesRequired && this.routesRequired.add) {\n                if (typeof this.permissionsRequired === 'object' && this.permissionsRequired !== null && this.permissionsRequired.add) {\n                    buttons.push(headerMixins.addButton(this.routesRequired.add, this.permissionsRequired.add))\n                } else if (this.permissionsRequired) {\n                    buttons.push(headerMixins.addButton(this.routesRequired.add, this.permissionsRequired))\n                } else {\n                    buttons.push(headerMixins.addButton(this.routesRequired.add))\n                }\n            }\n\n            if(!this.hideFilterButton) {\n                buttons.push(headerMixins.filterButton())\n            }\n\n            if (this.headerButtons) {\n                buttons = buttons.concat(this.headerButtons)\n            }\n\n\n            let floaters = []\n\n            if (this.headerFloaters) {\n                headerFloaters = headerFloaters.concat(this.headerFloaters)\n            }\n\n            let links = []\n            if (this.routesRequired && this.routesRequired.import) {\n                if (typeof this.permissionsRequired === 'object' && this.permissionsRequired !== null && this.permissionsRequired.import) {\n                    links.push(headerMixins.importOption(this.routesRequired.import, this.permissionsRequired.import))\n                } else if (this.permissionsRequired) {\n                    links.push(headerMixins.importOption(this.routesRequired.import, this.permissionsRequired))\n                }\n            }\n\n            if (this.routesRequired && this.routesRequired.config) {\n                if (typeof this.permissionsRequired === 'object' && this.permissionsRequired !== null && this.permissionsRequired.config) {\n                    links.push(headerMixins.configOption(this.routesRequired.config, this.permissionsRequired.config))\n                } else if (this.permissionsRequired) {\n                    links.push(headerMixins.configOption(this.routesRequired.config, this.permissionsRequired))\n                }\n            }\n            \n            links.push(headerMixins.printOption())\n            links.push(headerMixins.exportPdfOption())\n            links.push(headerMixins.exportCsvOption())\n            // links.push(headerMixins.exportExcelCsvOption())\n            links.push(headerMixins.exportXlsOption())\n\n            if (this.headerLinks) {\n                links = links.concat(this.headerLinks)\n            }\n\n            return {\n                hideLinks: this.hideHeaderLinks || false,\n                buttons,\n                floaters,\n                sort: headerMixins.getSortOptions(this.sortOptions || {}, this.getSortOptionsArray()),\n                links,\n                columns: this.columnsOptions,\n                title: this.pageTitle || '',\n                subTitle: this.pageTitle ? this.subTitle || '' : '',\n            }\n        },\n        getKeyBindingOptions() {\n            let opts = {\n                ...headerMixins.commonKeyBindings\n            }\n            if (this.routesRequired && this.routesRequired.add) {\n                opts['key_a'] = this.routesRequired.add\n            }\n            return opts\n        },\n        applyPageHeader() {\n            let pageHeaderOptions = Object.assign({}, this.getHeaderOptions(), this.header || {})\n            let keyBindings = Object.assign({}, this.getKeyBindingOptions(), this.keyBindings || {})\n            this.SetUiConfig({\n                pageHeader: pageHeaderOptions,\n            })\n            this.SetConfig({\n                keyBindings: keyBindings,\n            })\n        },\n        async export (options) {\n            this.isLoading = true\n            const transformers = await import('@js/helpers/transformers' /* webpackChunkName: \"js/helpers/transformers\" */ )\n            const getFinalValue = (item, key) => {\n                let finalVal\n                const keys = key.split('.')\n                if(keys && keys.length) {\n                    keys.forEach((k, i) => {\n                        finalVal = finalVal ? finalVal[k] : (i === 0 ? item[k] : null)\n                    })\n                } else {\n                    finalVal = item[key]\n                }\n                return finalVal\n            }\n\n            let exportUtil\n            let exportOptions = this.exportOptions || {}\n            let fields = this.exportPdfFields || this.fields.filter(f => f.label && !f.cantExport)\n            let content = []\n            let excelStrings = false\n            let fileTitle = ''\n            let fileName = moment()\n                .unix()\n\n            if (this.$route.meta.title) {\n                fileTitle = this.$route.meta.trans ? $t(this.$route.meta.trans, { attribute: $t(this.$route.meta.title) }) : $t(this.$route.meta.title)\n                fileName = fileTitle.toLowerCase()\n                    .replace(/\\s+/g, '-') + '-' + fileName\n            }\n\n            if (options.type === 'xls-csv') {\n                options.type = 'csv'\n                excelStrings = true\n            }\n\n            if (options.type === 'pdf' || options.type === 'print') {\n                exportUtil = await import('@core/utils/export/pdf' /* webpackChunkName: \"js/utils/export-pdf\" */ )\n                const columns = fields.map(f => {\n                    return {\n                        header: f.label,\n                        dataKey: f.key,\n                    }\n                })\n\n                content = this.entities.data.map(item => {\n                    let row = {}\n                    fields.forEach(field => {\n                        let ft = field.transformer\n                        let value = getFinalValue(item, field.key)\n                        if(ft && (value || value === false)) {\n                            ft = _.isArray(ft) ? ft : [ft]\n                            ft.forEach(ftrans => {\n                                const func = _.isFunction(ftrans) ? ftrans : transformers[ftrans]\n                                value = field.transformerOpts ? func(value, field.transformerOpts) : func(value, item)\n                            })\n                        }\n\n                        row[field.key] = value || \"\"\n                    })\n                    return row\n                })\n\n                if(options.type === 'pdf') {\n                    exportUtil.downloadPdfFile(fileName, fileTitle, columns, content, exportOptions)\n                } else {\n                    exportUtil.printTable(fileTitle, columns, content, exportOptions)\n                }\n\n            } else {\n                exportUtil = await import('@core/utils/export/csv' /* webpackChunkName: \"js/utils/export-csv\" */ )\n                content = this.entities.data.map(item => {\n                    let row = {}\n                    fields.forEach(field => {\n                        let ft = field.transformer\n                        let value = getFinalValue(item, field.key)\n                        if(ft && (value || value === false)) {\n                            ft = _.isArray(ft) ? ft : [ft]\n                            ft.forEach(ftrans => {\n                                const func = _.isFunction(ftrans) ? ftrans : transformers[ftrans]\n                                value = field.transformerOpts ? func(value, field.transformerOpts) : func(value, item)\n                            })\n                        }\n\n                        row[field.label] = value || \"\"\n                    })\n                    return row\n                })\n\n                exportUtil.downloadFile(content, options.type, fileName)\n            }\n\n            this.isLoading = false\n        },\n        doInitSub() {\n            this.uuid = this.$route.params.uuid\n            if(!this.uuid) {\n                this.isLoading = false\n                this.$router.back()\n            }\n            this.InitSub({\n                url: this.uuid + '/' + this.initSubUrl,\n                filters: this.filtersOptions,\n            })\n        },\n        doInit() {\n            this.Init({\n                url: this.initUrl,\n                filters: this.filtersOptions,\n                columns: this.fields,\n            })\n\n            this.applyPageHeader()\n        },\n        clearFilters() {\n            this.ResetFilters()\n            if(this.$route.query && this.$route.query.filtered) {\n                this.$router.push({ path: this.$route.path })\n            }\n        },\n        rowClickHandler(opts, item) {\n            if(opts.action && typeof opts.action === \"function\") {\n                opts.action(opts, item)\n            } else if(opts.route){\n                this.$router.push({ name: opts.route, params: { uuid: item.uuid } })\n            }\n        }\n    },\n    mounted() {\n        EventBus.$off('REFRESH_TABLE', this.refreshTableIfRoute)\n        EventBus.$on('REFRESH_TABLE', this.refreshTableIfRoute)\n        EventBus.$off('TOGGLE_FILTER', this.toggleFilter)\n        EventBus.$on('TOGGLE_FILTER', this.toggleFilter)\n        EventBus.$off('CLEAR_FILTERS', this.clearFilters)\n        EventBus.$on('CLEAR_FILTERS', this.clearFilters)\n        EventBus.$off('EXPORT', this.export)\n        EventBus.$on('EXPORT', this.export)\n        this.doInit()\n    },\n    destroyed() {\n        EventBus.$off('REFRESH_TABLE', this.refreshTableIfRoute)\n        EventBus.$off('TOGGLE_FILTER', this.toggleFilter)\n        EventBus.$off('CLEAR_FILTERS', this.clearFilters)\n        EventBus.$off('EXPORT', this.export)\n    },\n}\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/BA;AAiCA;AACA;AAiBA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AArBA;AAuBA;AACA;AACA;AA9CA;AAgDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAiBA;AAicA;AACA;AAfA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAFA;AAHA;AASA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AAnRA;AAoRA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA,gOAEA;AACA;AAHA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAnCA;AAAA;AAAA;AAAA;AACA;AADA;AAAA,2RAqCA;AACA;AAtCA;AAqCA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApEA;AAAA;AACA;AADA;AAAA;AAAA,2RAsEA;AACA;AAvEA;AAsEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AA1FA;AA4FA;AACA;AA7FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA6FA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAlZA;AAoZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzgBA;;;;A","sourceRoot":""}